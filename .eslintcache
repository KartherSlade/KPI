[{"D:\\Batrak-chan\\src\\index.js":"1","D:\\Batrak-chan\\src\\reducer.js":"2","D:\\Batrak-chan\\src\\components\\CreatePost\\index.js":"3","D:\\Batrak-chan\\src\\mocks.js":"4","D:\\Batrak-chan\\src\\components\\Posts\\index.js":"5","D:\\Batrak-chan\\src\\components\\Posts\\components\\Comment.js":"6","D:\\Batrak-chan\\src\\components\\Feed\\index.js":"7","D:\\Batrak-chan\\src\\components\\Layout\\index.js":"8","D:\\Batrak-chan\\src\\components\\UsersList\\index.js":"9","D:\\Batrak-chan\\src\\components\\Profile\\index.js":"10","D:\\Batrak-chan\\src\\components\\Layout\\components\\Header.js":"11","D:\\Batrak-chan\\src\\components\\Posts\\components\\Post.js":"12"},{"size":336,"mtime":1608665492000,"results":"13","hashOfConfig":"14"},{"size":3391,"mtime":1609101754000,"results":"15","hashOfConfig":"14"},{"size":1826,"mtime":1609090184000,"results":"16","hashOfConfig":"14"},{"size":1416737,"mtime":1609100994000,"results":"17","hashOfConfig":"14"},{"size":140,"mtime":1608674908000,"results":"18","hashOfConfig":"14"},{"size":596,"mtime":1609089124000,"results":"19","hashOfConfig":"14"},{"size":591,"mtime":1609101058000,"results":"20","hashOfConfig":"14"},{"size":365,"mtime":1608664062000,"results":"21","hashOfConfig":"14"},{"size":2047,"mtime":1609089440000,"results":"22","hashOfConfig":"14"},{"size":2477,"mtime":1609104326000,"results":"23","hashOfConfig":"14"},{"size":261,"mtime":1609098728000,"results":"24","hashOfConfig":"14"},{"size":2508,"mtime":1609098704000,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"i8plb5",{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"28"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Batrak-chan\\src\\index.js",[],["53","54"],"D:\\Batrak-chan\\src\\reducer.js",["55"],"import mocks from \"./mocks\";\r\n\r\nconst initialState = {\r\n  currentUser: \"1\",\r\n  searchPhrase: \"\",\r\n  ...mocks,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"SET_SEARCH_PHRASE\":\r\n      return {\r\n        ...state,\r\n        searchPhrase: action.payload,\r\n      };\r\n    case \"CREATE_POST\":\r\n      const currentUserObj = state.users.find(\r\n        (user) => user.id === state.currentUser\r\n      );\r\n      return {\r\n        ...state,\r\n        users: [\r\n          ...state.users.filter((user) => user.id !== state.currentUser),\r\n          {\r\n            ...currentUserObj,\r\n            posts: [...currentUserObj.posts, action.payload.id],\r\n          },\r\n        ],\r\n        posts: [\r\n          ...state.posts,\r\n          { ...action.payload.data, author: state.currentUser },\r\n        ],\r\n      };\r\n    case \"ADD_COMMENT\":\r\n      const commentedPost = state.posts.find(\r\n        (post) => action.payload.postId === post.id\r\n      );\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts.filter((post) => post.id !== action.payload.postId),\r\n          {\r\n            ...commentedPost,\r\n            comments: [...commentedPost.comments, action.payload.data.id],\r\n          },\r\n        ],\r\n        comments: [\r\n          ...state.comments,\r\n          {\r\n            ...action.payload.data,\r\n            author: state.currentUser,\r\n          },\r\n        ],\r\n      };\r\n    case \"LIKE\":\r\n      const postToLike = state.posts.find(\r\n        (post) => post.id === action.payload.postId\r\n      );\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts.filter((post) => post.id !== action.payload.postId),\r\n          {\r\n            ...postToLike,\r\n            likes: [...postToLike.likes, state.currentUser],\r\n          },\r\n        ],\r\n      };\r\n    case \"REMOVE_LIKE\":\r\n      const postToDislike = state.posts.find(\r\n        (post) => post.id === action.payload.postId\r\n      );\r\n      return {\r\n        ...state,\r\n        posts: [\r\n          ...state.posts.filter((post) => post.id !== action.payload.postId),\r\n          {\r\n            ...postToDislike,\r\n            likes: postToDislike.likes.filter((id) => id !== state.currentUser),\r\n          },\r\n        ],\r\n      };\r\n    case \"TOGGLE_FOLLOW\":\r\n      const userToToggle = state.users.find(\r\n        (user) => user.id === action.payload.userId\r\n      );\r\n      const currentUser = state.users.find(\r\n        (user) => user.id === state.currentUser\r\n      );\r\n\r\n      const doesCurrentUserFollowTarget = userToToggle.followers.includes(\r\n        state.currentUser\r\n      );\r\n\r\n      return {\r\n        ...state,\r\n        users: [\r\n          ...state.users.filter(\r\n            (user) =>\r\n              user.id !== action.payload.userId && user.id !== state.currentUser\r\n          ),\r\n          {\r\n            ...userToToggle,\r\n            followers: doesCurrentUserFollowTarget\r\n              ? userToToggle.followers.filter((id) => id !== state.currentUser)\r\n              : [...userToToggle.followers, currentUser],\r\n          },\r\n          {\r\n            ...currentUser,\r\n            following: doesCurrentUserFollowTarget\r\n              ? currentUser.following.filter(id => id !== action.payload.userId)\r\n              : [...currentUser.following, action.payload.userId],\r\n          },\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","D:\\Batrak-chan\\src\\components\\CreatePost\\index.js",["56"],"import { useState, useRef } from \"react\";\r\nimport { FiPlusSquare, FiArrowRight } from \"react-icons/fi\";\r\nimport { useDispatch } from 'react-redux';\r\nimport { v4 } from 'uuid';\r\n\r\nconst CreatePost = () => {\r\n  const [img, setImg] = useState({ url: \"\", file: \"\" });\r\n  const textFieldRef = useRef(null);\r\n\r\n  const handleFileChange = (e) => {\r\n    const file = e.target.files[0];\r\n    const reader = new FileReader();\r\n    reader.onloadend = () => {\r\n      if (file) {\r\n        setImg({\r\n          url: URL.createObjectURL(file),\r\n          file: reader.result,\r\n        });\r\n      }\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const handleAddPost = () => {\r\n    const postId = v4();\r\n    dispatch({ type: 'CREATE_POST', payload: {\r\n    id: postId,\r\n    data: {\r\n      id: postId,\r\n      image: img.url,\r\n      text: textFieldRef.current.value,\r\n      likes: [],\r\n      timestamp: new Date().toString().slice(4, 15)\r\n    }\r\n  }})}\r\n  return (\r\n    <div className=\"add-container\">\r\n      <div className=\"add-header\">\r\n        <span>New post</span>\r\n        <FiArrowRight onClick={handleAddPost} />\r\n      </div>\r\n      <div className=\"add-upload-img\">\r\n        {img.url ? (\r\n          <img\r\n            onClick={() => setImg({ url: \"\", file: \"\" })}\r\n            src={img.url}\r\n            alt=\"Image to post\"\r\n          />\r\n        ) : (\r\n          <>\r\n            <input\r\n              onChange={handleFileChange}\r\n              type=\"file\"\r\n              id=\"upload-img\"\r\n              hidden\r\n            />\r\n            <label htmlFor=\"upload-img\">\r\n              <FiPlusSquare />\r\n            </label>\r\n          </>\r\n        )}\r\n      </div>\r\n      <textarea ref={textFieldRef} placeholder=\"Add a message to your post...\" />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreatePost;\r\n","D:\\Batrak-chan\\src\\mocks.js",["57"],"D:\\Batrak-chan\\src\\components\\Posts\\index.js",[],"D:\\Batrak-chan\\src\\components\\Posts\\components\\Comment.js",[],"D:\\Batrak-chan\\src\\components\\Feed\\index.js",[],"D:\\Batrak-chan\\src\\components\\Layout\\index.js",[],"D:\\Batrak-chan\\src\\components\\UsersList\\index.js",[],"D:\\Batrak-chan\\src\\components\\Profile\\index.js",[],"D:\\Batrak-chan\\src\\components\\Layout\\components\\Header.js",[],"D:\\Batrak-chan\\src\\components\\Posts\\components\\Post.js",["58"],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":9,"column":1,"nodeType":"65","endLine":119,"endColumn":3},{"ruleId":"66","severity":1,"message":"67","line":46,"column":11,"nodeType":"68","endLine":50,"endColumn":13},{"ruleId":"63","severity":1,"message":"69","line":120,"column":1,"nodeType":"65","endLine":124,"endColumn":2},{"ruleId":"66","severity":1,"message":"67","line":47,"column":7,"nodeType":"68","endLine":47,"endColumn":71},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","Assign object to a variable before exporting as module default","no-global-assign","no-unsafe-negation"]